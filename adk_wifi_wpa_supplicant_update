#!/bin/sh
#
# Copyright (c) 2018, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

convPassphraseToPsk() {
        local ssid="$1"
        local passphrase="$2"

        wpa_passphrase "$ssid" "$passphrase" | grep '^\s*psk=' | sed 's/^\s*psk=//'
}

while getopts "s:p:" opt
do
  case ${opt} in
    s ) ssid=$OPTARG;;
    p ) key=$OPTARG;;
    ? ) echo "Enter: update_wpa_supplicant_conf -s ssid -p password"
  esac
done

# Location of wpa_supplicant conf file
file="/etc/misc/wifi/wpa_supplicant.conf"

#hexSsid="$(echo -n "$ssid" | hexdump -v -n 32 -e '/1 "%02x"')"

if [ -z "$key" ]; then
	key_mgmt="NONE"
else
	key_mgmt="WPA-PSK"
	psk="$(convPassphraseToPsk "$ssid" "$key")"
fi

# Update wpa_supplicant conf file in the temp location
# Add the input SSID and password
if [ "$ssid" != "" ]; then
cat > /data/wpa_supplicant.conf.tmp <<-EOF
	ctrl_interface=/var/run/wpa_supplicant
	p2p_disabled=1
	wowlan_triggers=any
	update_config=1
	network={
		scan_ssid=1
		key_mgmt=$key_mgmt
		ssid="$ssid"
		${psk:+psk=$psk}
	}
	EOF
else
# No valid SSID, so comment out the entries to avoid connecting to open networks
cat > /data/wpa_supplicant.conf.tmp <<-EOF
	ctrl_interface=/var/run/wpa_supplicant
	p2p_disabled=1
	wowlan_triggers=any
	update_config=1
	network={
		#scan_ssid=1
		#key_mgmt
		#ssid
	}
	EOF
fi

# Now copy the temp file to the correct location
cp /data/wpa_supplicant.conf.tmp "$file"
rm /data/wpa_supplicant.conf.tmp

